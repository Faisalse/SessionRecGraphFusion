type: window # opt|single|window
key: baseline_all #added to the csv names
evaluation: evaluation_user_based #evaluation|evaluation_last|evaluation_multiple|evaluation_next_multiple|evaluation_user_based_next|evaluation_user_based_multiple
data:
  name: retailrocket #added in the end of the csv names
  folder: data/retailrocket/prepared_window/
  prefix: events
  type: hdf #hdf (if there is no type, the default is csv)
  slices: 5
  skip: [0,1,2,3] # we need only slice 4 (smallest one)

results:
  folder: results/window/scalability/retailrocket/

metrics:
- class: time_memory_usage.Time_usage_training
- class: time_memory_usage.Time_usage_testing
- class: time_memory_usage.Memory_usage

algorithms:
# SR
#
- class: baselines.sr.SequentialRules
  params: { steps: 15, weighting: quadratic }
  key: sr
#
- class: baselines.usr.USequentialRules
  params: { steps: 12, weighting: quadratic, boost_own_sessions: 3.1 }
  key: sr_B
#
- class: baselines.usr.USequentialRules
  params: { steps: 15, weighting: quadratic, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 7, weight_base: 10, weight_IRec: 8}
  key: sr_R
#
- class: baselines.usr.USequentialRules
  params: { steps: 12, weighting: quadratic, boost_own_sessions: 3.1 , reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 2, weight_base: 5, weight_IRec: 3}
  key: sr_BR
# VSKNN
#
- class: knn.vsknn.VMContextKNN
  params: { k: 50, sample_size: 500, weighting: log , weighting_score: linear, idf_weighting: 10  }
  key: vsknn
#
- class: knn.uvsknn.UVMContextKNN
  params: { k: 50, sample_size: 1000, weighting: log , weighting_score: linear, idf_weighting: 2, boost_own_sessions: 0.9 }
  key: vsknn_B
#
- class: knn.uvsknn.UVMContextKNN
  params: { k: 1500, sample_size: 1000, weighting: quadratic , weighting_score: div, idf_weighting: 5, extend_session_length: 7 }
  key: vsknn_E
#
- class: knn.uvsknn.UVMContextKNN
  params: { k: 1500, sample_size: 1000, weighting: log , weighting_score: linear, idf_weighting: 1, extend_session_length: 8, boost_own_sessions: 0.1 }
  key: vsknn_EB
#
- class: knn.uvsknn.UVMContextKNN
  params: { k: 50, sample_size: 500, weighting: log , weighting_score: linear, idf_weighting: 10, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 2, weight_base: 8, weight_IRec: 4, weight_SSim: 0 }
  key: vsknn_R
#
- class: knn.uvsknn.UVMContextKNN
  params: { k: 1500, sample_size: 1000, weighting: quadratic , weighting_score: div, idf_weighting: 5, extend_session_length: 7, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 8, weight_base: 10, weight_IRec: 0, weight_SSim: 2  }
  key: vsknn_ER
#
- class: knn.uvsknn.UVMContextKNN
  params: { k: 1500, sample_size: 1000, weighting: log , weighting_score: linear, idf_weighting: 1, extend_session_length: 8, boost_own_sessions: 0.1, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 4, weight_base: 8, weight_IRec: 1, weight_SSim: 1 }
  key: vsknn_EBR
# STAN
#
- class: knn.stan.STAN
  params: { k: 1500, sample_size: 2500, lambda_spw: 0.905 , lambda_snh: 100, lambda_inh: 0.4525 }
  key: stan
#
- class: knn.ustan.USTAN
  params: { k: 200, sample_size: 2500, lambda_spw: 0.905 , lambda_snh: 40, lambda_inh: 0.905 , boost_own_sessions: 2.1 }
  key: stan_B
#
- class: knn.ustan.USTAN
  params: { k: 200, sample_size: 1000, lambda_spw: 0.905 , lambda_snh: 100, lambda_inh: 0.905 , extend_session_length: 2 }
  key: stan_E
#
- class: knn.ustan.USTAN
  params: { k: 2000, sample_size: 2500, lambda_spw: 0.4525 , lambda_snh: 100, lambda_inh: 0.905 , extend_session_length: 2, boost_own_sessions: 0.3 }
  key: stan_EB
#
- class: knn.ustan.USTAN
  params: { k: 1500, sample_size: 2500, lambda_spw: 0.905 , lambda_snh: 100, lambda_inh: 0.4525 , reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 2, weight_base: 3, weight_IRec: 0, weight_SSim: 2 }
  key: stan_R
- class: knn.ustan.USTAN
  params: { k: 200, sample_size: 1000, lambda_spw: 0.905 , lambda_snh: 100, lambda_inh: 0.905 , extend_session_length: 2, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 9, weight_base: 10, weight_IRec: 3, weight_SSim: 2 }
  key: stan_ER
#
- class: knn.ustan.USTAN
  params: { k: 2000, sample_size: 2500, lambda_spw: 0.4525 , lambda_snh: 100, lambda_inh: 0.905 , extend_session_length: 2, boost_own_sessions: 0.3, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 3, weight_base: 4, weight_IRec: 1, weight_SSim: 0 }
  key: stan_EBR
# VSTAN
#
- class: knn.vstan.VSKNN_STAN
  params: {k: 200, sample_size: 5000 , similarity: 'vec', lambda_spw: 1.81, lambda_snh: 40, lambda_inh: 0.905, lambda_ipw: 0.905, lambda_idf: False }
  key: vstan
#
- class: knn.uvstan.U_VSKNN_STAN
  params: {k: 1000, sample_size: 2500 , similarity: 'vec', lambda_spw: 3.62, lambda_snh: 40, lambda_inh: 0.4525, lambda_ipw: 0.905, lambda_idf: 5, boost_own_sessions: 2.9 }
  key: vstan_B
#
- class: knn.uvstan.U_VSKNN_STAN
  params: {k: 200, sample_size: 1000 , similarity: 'cosine', lambda_spw: 0.4525, lambda_snh: 20, lambda_inh: 0.905, lambda_ipw: 3.62, lambda_idf: 5, extend_session_length: 2}
  key: vstan_E
#
- class: knn.uvstan.U_VSKNN_STAN
  params: {k: 2000, sample_size: 10000 , similarity: 'cosine', lambda_spw: 0.905, lambda_snh: 80, lambda_inh: 1.81, lambda_ipw: 3.62, lambda_idf: 5, extend_session_length: 5, boost_own_sessions: 0.1}
  key: vstan_EB
#
- class: knn.uvstan.U_VSKNN_STAN
  params: {k: 200, sample_size: 5000 , similarity: 'vec', lambda_spw: 1.81, lambda_snh: 40, lambda_inh: 0.905, lambda_ipw: 0.905, lambda_idf: False, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 10, weight_base: 8, weight_IRec: 0, weight_SSim: 2 }
  key: vstan_R
#
- class: knn.uvstan.U_VSKNN_STAN
  params: {k: 200, sample_size: 1000 , similarity: 'cosine', lambda_spw: 0.4525, lambda_snh: 20, lambda_inh: 0.905, lambda_ipw: 3.62, lambda_idf: 5, extend_session_length: 2, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 8, weight_base: 10, weight_IRec: 1, weight_SSim: 4 }
  key: vstan_ER
#
- class: knn.uvstan.U_VSKNN_STAN
  params: {k: 2000, sample_size: 10000 , similarity: 'cosine', lambda_spw: 0.905, lambda_snh: 80, lambda_inh: 1.81, lambda_ipw: 3.62, lambda_idf: 5, extend_session_length: 5, boost_own_sessions: 0.1, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 2, weight_base: 6, weight_IRec: 2, weight_SSim: 0}
  key: vstan_EBR